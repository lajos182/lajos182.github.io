<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lajos的博客</title>
  
  <subtitle>一眼之念，一念执着</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lajos182.github.io/"/>
  <updated>2020-04-27T06:29:54.184Z</updated>
  <id>https://lajos182.github.io/</id>
  
  <author>
    <name>Lajos</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>No.2 Python语言基础--变量、数据类型及运算符</title>
    <link href="https://lajos182.github.io/2020/04/27/No-2-Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://lajos182.github.io/2020/04/27/No-2-Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-04-27T06:25:47.000Z</published>
    <updated>2020-04-27T06:29:54.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-标识符、变量与常量"><a href="#2-1-标识符、变量与常量" class="headerlink" title="2.1. 标识符、变量与常量"></a>2.1. 标识符、变量与常量</h2><p><strong>标识符</strong>：开发人员在程序中自定义的一些符合和名称，其实就是一串字符串，如变量名、函数名等</p><p>Python标识符规则：只能由数字、字符和下划线组成，开头不能是数字，不能是关键字，大小写敏感且见名知义，要遵循小驼峰原则。</p><a id="more"></a><p><img src="https://github.com/lajos182/python-essay/blob/master/images/Identifier.png" alt="标识符"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist) <span class="comment"># 关键字列表</span></span><br><span class="line">&gt;&gt;&gt;[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><p><strong>变量</strong>：在程序运行过程中，其值可以改变的量。</p><p>变量命名原则：尽量做到见名知意、尽量使用英文、推荐使用全小写加下划线的方式，如<code>user_name</code></p><p><strong>常量</strong>：程序运行期间不会改变的数据，如<code>a = 1</code>。在python中没有常量，通常使用大写字母加下划线的方式模拟，如：<code>USER_NAME = &#39;xiaoming&#39;</code></p><p><img src="https://github.com/lajos182/python-essay/blob/master/images/variable%20and%20constant.png" alt="变量与常量"></p><p>代码注释：单行注释（<code># 注释内容</code>）、多行注释（<code>&#39;&#39;&#39;注释&#39;&#39;&#39;</code>, <code>&quot;&quot;&quot;注释&quot;&quot;&quot;</code>）</p><h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2. 数据类型"></a>2.2. 数据类型</h2><p>数据类型是为了处理不同的运算而存在，python中的数据类型有：<strong>整型(int)</strong>、<strong>浮点(float)</strong>、<strong>字符串(str)</strong>、<strong>列表(list)</strong>、<strong>元组(tuple)</strong>、<strong>字典(dict)</strong>、<strong>集合(set)</strong>、<strong>空(NoneType)</strong></p><h3 id="2-2-1-字符串格式化"><a href="#2-2-1-字符串格式化" class="headerlink" title="2.2.1. 字符串格式化"></a>2.2.1. 字符串格式化</h3><p>在 Python 3.6 之前，字符串格式化方法主要有两种：<code>%格式化</code> 和 <code>str.format()</code>，Python3.6提供了一种新的字符串格式化方法：<code>f-string</code></p><ul><li><p>(1)<code>%-格式化</code>从 Python 刚开始时就存在了，堪称「一届元老」，但是 <a href="https://link.zhihu.com/?target=https%3A//docs.python.org/3/library/stdtypes.html%23printf-style-string-formatting">Python 官方文档</a>中并不推荐这种格式化方式：</p><blockquote><p>这里描述的格式化操作容易表现出各种问题，导致许多常见错误（例如无法正确显示元组和字典）。 使用较新的格式化字符串文字或 str.format() 可以有助于避免这些错误。这些替代方案还提供了更强大，灵活和可扩展的格式化文本方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'lajos'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'hello, %s, your age is %s ?'</span> %(name, age)</span><br><span class="line"><span class="string">'hello, lajos, your age is 18?'</span></span><br></pre></td></tr></table></figure></li><li><p>(2)<code>str.formar()</code>从Python2.6开始引入，它使用普通函数调用语法，并且可以通过 <code>__format__()</code> 方法为对象进行扩展。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello, &#123;&#125;. you are &#123;&#125;?"</span>.format(name,age)</span><br><span class="line"><span class="string">'hello, hoxis. you are 18?'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello, &#123;1&#125;. you are &#123;0&#125;?"</span>.format(age,name)</span><br><span class="line"><span class="string">'hello, hoxis. you are 18?'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello, &#123;name&#125;. you are &#123;age1&#125;?"</span>.format(age1=age,name=name)</span><br><span class="line"><span class="string">'hello, hoxis. you are 18?'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person = &#123;<span class="string">"name"</span>:<span class="string">"hoxis"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello, &#123;name&#125;. you are &#123;age&#125;?"</span>.format(**person)</span><br><span class="line"><span class="string">'hello, hoxis. you are 18?'</span></span><br></pre></td></tr></table></figure></li><li><p>(3)<code>f-Strings</code>是指以 <code>f</code> 或 <code>F</code> 开头的字符串，其中以 <code>{}</code> 包含的表达式会进行值替换。f-string 里的 f 也许可以代表 <code>fast</code>，它比 %格式化方法和 str.format() 都要快：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'hoxis'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"hi, <span class="subst">&#123;name&#125;</span>, are you <span class="subst">&#123;age&#125;</span>"</span> <span class="comment"># 替换字符串</span></span><br><span class="line"><span class="string">'hi, hoxis, are you 18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>F<span class="string">"hi, &#123;name&#125;, are you &#123;age&#125;"</span></span><br><span class="line"><span class="string">'hi, hoxis, are you 18'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">&#123;name.lower()&#125;</span> is handsome."</span> <span class="comment"># 调用函数</span></span><br><span class="line"><span class="string">'hoxis is handsome.'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.name&#125;</span> is <span class="subst">&#123;self.age&#125;</span>"</span> <span class="comment"># 在类中使用</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;self.name&#125;</span> is <span class="subst">&#123;self.age&#125;</span>. HAHA!"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hoxis = Person(<span class="string">"hoxis"</span>,<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">&#123;hoxis&#125;</span>"</span></span><br><span class="line"><span class="string">'hoxis is 18'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"<span class="subst">&#123;hoxis!r&#125;</span>"</span></span><br><span class="line"><span class="string">'hoxis is 18. HAHA!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(hoxis)</span><br><span class="line">hoxis <span class="keyword">is</span> <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hoxis</span><br><span class="line">hoxis <span class="keyword">is</span> <span class="number">18.</span> HAHA!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">'hoxis'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = <span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>status = <span class="string">'Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">f'hi <span class="subst">&#123;name&#125;</span>.'</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">f'you are <span class="subst">&#123;age&#125;</span>.'</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">f'you are learning <span class="subst">&#123;status&#125;</span>.'</span></span><br><span class="line"><span class="meta">... </span>&#125;  <span class="comment"># 多行f-string</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message</span><br><span class="line">&#123;<span class="string">'hi hoxis.you are 18.you are learning Python.'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（4）<code>f-string</code>在python3.8中加入新特性，可以在表达式的末尾添加<code>=</code>,此时可以同时显示表达式和值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; python &#x3D; 3.8</span><br><span class="line">&gt;&gt;&gt; f&#39;&#123;python&#x3D;&#125;&#39;</span><br><span class="line">&#39;python &#x3D; 3.8&#39;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-列表、元组、字典、集合的区别"><a href="#2-2-2-列表、元组、字典、集合的区别" class="headerlink" title="2.2.2. 列表、元组、字典、集合的区别"></a>2.2.2. 列表、元组、字典、集合的区别</h3><table><thead><tr><th align="left"></th><th align="left">特点</th></tr></thead><tbody><tr><td align="left">列表</td><td align="left">列表是一组任意类型的值，按照一定的顺序组合而成； <br /> 通过索引来标识元素，第一个索引为0；需要注意的是索引可以是负值；<br /> 3列表中元素是任意类型的，包括列表类型； <br />可以进行合并，删除，索引，切片等操作； 5 定义表使用中括号。</td></tr><tr><td align="left">元组</td><td align="left">元组是任意对象的有序集合（这一点和列表相同）；<br />元组是不可变的（不能 增，删，改），但可以对元组进行合并；<br />元组的速度比列表要快；<br />定义元组使用小括号；<br />需要注意的是定义一个元素时需要加上逗号，例如tuple=（333，）。</td></tr><tr><td align="left">字典</td><td align="left">字典是通过键值对进行存储的，所以字典没有顺序；<br />字典是通过键值进行索引的且键值必须唯一； <br />字典可以进行增，删，改，查等操作，可以包含任意其他类型；<br />定义字典使用大括号，各个键值对之间使用逗号隔开。</td></tr><tr><td align="left">集合</td><td align="left">集合是简单对象的无序不重复元素集合； <br />集合分为可变集合set（元素是可哈希的），不可变集合frozenset（元素不可哈希）；<br />可以进行去除重复元素；<br />可以进行并集，交集，差集等。</td></tr></tbody></table><p>字典的创建方法：</p><ul><li><p>直接创建：<code>dict = {&#39;name&#39;: &#39;earth&#39;, &#39;port&#39;: 80}</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dict</span><span class="params">(**kwarg)</span>             # **<span class="title">kwargs</span> -- 关键字</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">dict</span><span class="params">(mapping, **kwarg)</span>    # <span class="title">mapping</span> -- 元素的容器。</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">dict</span><span class="params">(iterable, **kwarg)</span>   # <span class="title">iterable</span> -- 可迭代对象。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">dict1 = &#123;"a": 1, "b": 2&#125;</span><br><span class="line">dict2 = &#123;<span class="string">"c"</span>: <span class="number">3</span>&#125;</span><br><span class="line">dict3 = dict(dict1, **dict2) <span class="comment"># dict3 = &#123;"a": 1, "b": 2, "c": 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>工厂方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items = [(<span class="string">'name'</span>, <span class="string">'earth'</span>), (<span class="string">'port'</span>, <span class="number">80</span>)]</span><br><span class="line">dict1 = dict(items)</span><br><span class="line">dict2 = dict(([<span class="string">'name'</span>, <span class="string">'earth'</span>], [<span class="string">'port'</span>, <span class="string">'80'</span>]))</span><br></pre></td></tr></table></figure></li><li><p><code>fromkeys()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&#125;.fromkeys((<span class="string">'x'</span>, <span class="string">'y'</span>), <span class="number">-1</span>)  <span class="comment"># &#123;'x': -1, 'y': -1&#125;</span></span><br><span class="line">dict2 = &#123;&#125;.fromkeys((<span class="string">'x'</span>, <span class="string">'y'</span>))   <span class="comment"># &#123;'x': None, 'y': None&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-运算符与流程控制"><a href="#2-3-运算符与流程控制" class="headerlink" title="2.3. 运算符与流程控制"></a>2.3. 运算符与流程控制</h2><h3 id="2-3-1-运算符"><a href="#2-3-1-运算符" class="headerlink" title="2.3.1. 运算符"></a>2.3.1. 运算符</h3><p><img src="https://github.com/lajos182/python-essay/blob/master/images/operate.png" alt="标识符"></p><p>运算符优先级：无需记录运算符的优先级，需要的时候添加()即可。</p><p>灵活的<code>or</code>：<code>a = False or 2</code>， 赋值前会判断前面的值，若为真则使用，若为假，则使用or后面的值</p><p><strong>海象表达式<code>:=</code>:</strong>python3.8引入的新语法，将给变量赋值，这个变量可以是表达式的一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用在if中可以避免调用len()两次</span></span><br><span class="line"><span class="keyword">if</span> (n := len(a)) &gt; <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">f'List is too long (<span class="subst">&#123;n&#125;</span> elements, expected &lt;= 10)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式匹配和获取结果的时候</span></span><br><span class="line">discount = <span class="number">0.00</span></span><br><span class="line"><span class="keyword">if</span> (mo := re.search(<span class="string">r'(\d+)% discount'</span>, advertisement)):</span><br><span class="line">    discount = float(mo.group(<span class="number">1</span>)) / <span class="number">100.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用在while循环语句中，可以同时取值，并判断是否为空</span></span><br><span class="line"><span class="keyword">while</span> (block := f.read(<span class="number">256</span>) != <span class="string">''</span>):</span><br><span class="line">    process(block)</span><br></pre></td></tr></table></figure><h3 id="2-3-2-流程控制"><a href="#2-3-2-流程控制" class="headerlink" title="2.3.2. 流程控制"></a>2.3.2. 流程控制</h3><p><img src="https://github.com/lajos182/python-essay/blob/master/images/flow%20control.png" alt="流程控制"></p><p>列表生成式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])</span><br><span class="line">print([i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])</span><br><span class="line">print([i*i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])</span><br><span class="line">print([str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)])</span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure><ul><li><p><strong>冒泡排序法</strong>：每次比较相邻的两个元素，不合适就交换，依次向后，一圈下来可以确定一个元素；需要使用双重循环，外层循环控制循环的圈数， 内层控制一圈怎么交换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(lt, key=None, reverse=False)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lt) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(lt) - <span class="number">1</span> - i):</span><br><span class="line">            <span class="keyword">if</span> key == <span class="literal">None</span>:</span><br><span class="line">                temp = lt[i] &lt;= lt[i + <span class="number">1</span>] <span class="keyword">if</span> reverse <span class="keyword">else</span> lt[i] &gt; lt[i + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = key(lt[i]) &lt;= lt[i + <span class="number">1</span>] <span class="keyword">if</span> reverse <span class="keyword">else</span> key(lt[i]) &gt; key(lt[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                lt[i], lt[i + <span class="number">1</span>] = lt[i + <span class="number">1</span>], lt[i]</span><br><span class="line">    print(lt)</span><br><span class="line">    </span><br><span class="line">    lt1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line">lt2 = [</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaoming'</span>, <span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'height'</span>: <span class="number">160</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'xiaohua'</span>, <span class="string">'age'</span>: <span class="number">17</span>, <span class="string">'height'</span>: <span class="number">140</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">11</span>, <span class="string">'height'</span>: <span class="number">180</span>&#125;</span><br><span class="line">]</span><br><span class="line">choose_sort(lt1)</span><br><span class="line">choose_sort(lt2, key=lamamb x: x[<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure></li><li><p><strong>选择排序法</strong>：每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_sort</span><span class="params">(lt, key=None, reverse=False)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(lt) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(lt)):</span><br><span class="line">            <span class="keyword">if</span> key == <span class="literal">None</span>:</span><br><span class="line">                temp = lt[i] &lt;= lt[j] <span class="keyword">if</span> reverse <span class="keyword">else</span> lt[i] &gt; lt [j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = key(lt[i]) &lt;= key(lt[j]) <span class="keyword">if</span> reverse <span class="keyword">else</span> key(lt[i]) &gt; key(lt[j])</span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                lt[i], lt[j] = lt[j], lt[i]</span><br><span class="line">    print(lt)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">lt1 = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line">lt2 = [</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'xiaoming'</span>, <span class="string">'age'</span>: <span class="number">12</span>, <span class="string">'height'</span>: <span class="number">160</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'xiaohua'</span>, <span class="string">'age'</span>: <span class="number">17</span>, <span class="string">'height'</span>: <span class="number">140</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'xiaogang'</span>, <span class="string">'age'</span>: <span class="number">11</span>, <span class="string">'height'</span>: <span class="number">180</span>&#125;</span><br><span class="line">]</span><br><span class="line">choose_sort(lt1)</span><br><span class="line">choose_sort(lt2, key=lamamb x: x[<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2-1-标识符、变量与常量&quot;&gt;&lt;a href=&quot;#2-1-标识符、变量与常量&quot; class=&quot;headerlink&quot; title=&quot;2.1. 标识符、变量与常量&quot;&gt;&lt;/a&gt;2.1. 标识符、变量与常量&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;标识符&lt;/strong&gt;：开发人员在程序中自定义的一些符合和名称，其实就是一串字符串，如变量名、函数名等&lt;/p&gt;
&lt;p&gt;Python标识符规则：只能由数字、字符和下划线组成，开头不能是数字，不能是关键字，大小写敏感且见名知义，要遵循小驼峰原则。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://lajos182.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>No.1 Python简介与版本介绍</title>
    <link href="https://lajos182.github.io/2020/04/27/No-1-Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lajos182.github.io/2020/04/27/No-1-Python%E7%AE%80%E4%BB%8B%E4%B8%8E%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-04-27T02:53:11.000Z</published>
    <updated>2020-04-27T05:59:02.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-Python简介"><a href="#1-1-Python简介" class="headerlink" title="1.1. Python简介"></a>1.1. Python简介</h2><ul><li><p>Python是一种<strong>解释型</strong>(不需要编译)、<strong>面向对象</strong>、<strong>动态数据类型</strong>的交互式语言，Python是由由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。</p></li><li><p><strong>Python的优势</strong>：</p><ul><li><p><strong>易于学习</strong>：Python有相对较少的关键字，结构简单，有明确定义的语法，学习起来相对简单。 </p><a id="more"></a></li><li><p><strong>易于阅读</strong>：Python代码的定义比较清晰，易于阅读。 </p></li><li><p><strong>易于维护</strong>：Python的成功在于它的源代码是相当容易维护。</p></li><li><p><strong>具有一个广泛的标准库</strong>：Python的最大优势之一是具有丰富的库，可跨平台，兼容性较好。</p></li><li><p><strong>互动模式</strong>：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码的片段。 </p></li><li><p><strong>可移植</strong>：基于其开放源代码的特性，Python已经被移植到许多平台。 </p></li><li><p><strong>可扩展性</strong>：如果需要一段运行很快的关键代码，或者想要编程一些不愿开放的算法，你可以使用c或者c++完成那部分程序，然后从你的Python程序中进行调用。 </p></li><li><p><strong>GUI编程</strong>：Python支持GUI可以创建和移植到许多系统调用。 </p></li><li><p><strong>可嵌入</strong>：你可以将Python嵌入到c/c++程序中，让你的程序用户得到“脚本”的能力</p></li></ul></li><li><p><strong>缺点</strong>：</p><ul><li><p><strong>运行速度慢</strong>：和C程序相比比较慢，因为Python是解释型语言，代码在执行时会一行一行的编译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。</p></li><li><p><strong>代码不能加密</strong>：如果要发布Python程序，实际上就是发布源代码，这一点与C语言不同,C语言不能发布源代码，只需要把编译后的机器码（也就是windows上常见的xxx.exe文件）发布出去。要从机器码反推出C代码是不可能的，所以，凡是编译型的语言，都没有这个问题，而解释型的语言，则必</p></li></ul></li></ul><h2 id="1-2-Python的设计模式"><a href="#1-2-Python的设计模式" class="headerlink" title="1.2. Python的设计模式"></a>1.2. Python的设计模式</h2><p><strong>设计模式的定义</strong>：为了解决面向对象系统中重要和重复的设计封装在一起的一种代码实现框架,可以使得代码更加易于扩展和调用。</p><ul><li><p><strong>设计模式的基本要素</strong>：模式名称、问题、解决方案、效果。</p><p><strong>设计模式的六大原则</strong>：    </p><ul><li>开闭原则：一个软件实体,如类,模块和函数应该对扩展开发,对修改关闭.既软件实体应尽量在不修改原有代码的情况下进行扩展。</li><li>里氏替换原则：所有引用父类的方法必须能透明的使用其子类的对象。</li><li>依赖倒置原则：高层模块不应该依赖底层模块,二者都应该依赖其抽象,抽象不应该依赖于细节,细节应该依赖抽象,换而言之,要针对接口编程而不是针对实现编程。</li><li>接口隔离原则：使用多个专门的接口,而不是使用单一的总接口,即客户端不应该依赖那些并不需要的接口。</li><li>迪米特法则：一个软件实体应该尽可能的少与其他实体相互作用。</li><li>单一职责原则：不要存在多个导致类变更的原因.即一个类只负责一项职责。</li></ul></li></ul><p><strong>Python的设计模式</strong>：</p><p><img src="https://github.com/lajos182/python-essay/blob/master/images/the%20design%20pattern%20of%20python.png" alt="the design pattern of python"></p><p>二十三设计模式案例详情，可参考：<a href="https://www.cnblogs.com/Liqiongyu/p/5916710.html" target="_blank" rel="noopener">https://www.cnblogs.com/Liqiongyu/p/5916710.html</a></p><h2 id="1-3-单例模式"><a href="#1-3-单例模式" class="headerlink" title="1.3. 单例模式"></a>1.3. 单例模式</h2><blockquote><p><strong>单利模式</strong>是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;__new__()&#96;在&#96;__init__()&#96;之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例 **这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.**</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-1-使用-new-方法"><a href="#1-3-1-使用-new-方法" class="headerlink" title="1.3.1. 使用__new__方法"></a>1.3.1. 使用<code>__new__</code>方法</h3><p><code>__new__</code>是真正创建实例对象的方法，所以重写基类的<code>__new__</code>方法，以此来保证创建对象的时候只生成一个实例 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance == super(Singlento, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Signleton)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line"></span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-使用装饰器"><a href="#1-3-2-使用装饰器" class="headerlink" title="1.3.2. 使用装饰器"></a>1.3.2. 使用装饰器</h3><p>装饰器维护一个字典对象instances，缓存了所有单例类，只要单例不存在则创建，已经存在直接返回该实例对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instance[cls]</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line"></span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-使用元类"><a href="#1-3-3-使用元类" class="headerlink" title="1.3.3. 使用元类"></a>1.3.3. 使用元类</h3><p>元类（参考：<a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">深刻理解Python中的元类</a>）是用于创建类对象的类，类对象创建实例对象时一定会调用<code>__call__</code>方法，因此在调用<code>__call__</code>时候保证始终只创建一个实例即可，<code>type</code>是python中的一个元类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            cls._instance = super(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    __metaclass__ = Singleton</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">foo1 = Foo()</span><br><span class="line">foo2 = Foo()</span><br><span class="line"> </span><br><span class="line">print(foo1 <span class="keyword">is</span> foo2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="1-3-4-import方法"><a href="#1-3-4-import方法" class="headerlink" title="1.3.4. import方法"></a>1.3.4. import方法</h3><p>import作为python的模块，是天然的单例模式，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">my_singleton = My_Singleton()</span><br></pre></td></tr></table></figure><p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，然后这样使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"> </span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure><p><a href="http://python.jobbole.com/87294/" target="_blank" rel="noopener"><strong>单例模式伯乐在线详细解释</strong></a></p><h2 id="1-4-Python中的元类-metaclass"><a href="#1-4-Python中的元类-metaclass" class="headerlink" title="1.4. Python中的元类(metaclass)"></a>1.4. Python中的元类(metaclass)</h2><p>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a>，中文看这个解释很详细<a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener">深刻理解Python中的元类</a></p><p>Python处处皆对象，类其实也是对象，使用<code>class</code>关键字时，Python会自动创建此对象。但与Python中的大多数内容一样，<code>type</code>为您提供了手动执行此操作的方法。<a href="http://docs.python.org/2/library/functions.html#type" target="_blank" rel="noopener"><code>type</code></a>有一个完全不同的能力，它也可以动态创建类。<code>type</code>可以将类的描述作为参数，并返回一个类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type(类名, 类名的元组(针对继承的情况，可以为空), 包含属性的字典(名称和值))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Foo = type(<span class="string">'Foo'</span>, (), &#123;<span class="string">'bar'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;print(Foo)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Foo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f)</span><br><span class="line">&lt;__main__.Foo object at <span class="number">0x8a9b84c</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.bar)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="1-5-Python自省"><a href="#1-5-Python自省" class="headerlink" title="1.5. Python自省"></a>1.5. Python自省</h2><p>这个也是python彪悍的特性.</p><p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如<code>type()</code>，<code>dir()</code>，<code>getattr()</code>，<code>hasattr()</code>，<code>isinstance()</code></p><h3 id="1-5-1-访问对象的属性"><a href="#1-5-1-访问对象的属性" class="headerlink" title="1.5.1. 访问对象的属性"></a>1.5.1. 访问对象的属性</h3><p><code>dir([obj])</code>：调用这个方法将返回包含obj大多数属性名的列表（会有一些特殊的属性不包含在内）。obj的默认值是当前的模块对象。</p><p><code>hasattr(obj, attr)</code>：这个方法用于检查obj是否有一个名为attr的值的属性，返回一个布尔值。</p><p><code>getattr(obj, attr)</code>：调用这个方法将返回obj中名为attr值的属性的值，例如如果attr为’bar’，则返回obj.bar。</p><p><code>setattr(obj, attr, val)</code>：调用这个方法将给obj的名为attr的值的属性赋值为val。例如如果attr为’bar’，则相当于obj.bar = val。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, *args, **kwargs)</span>:</span></span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sayHi</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line">cat = Cat(<span class="string">'kitty'</span>)</span><br><span class="line">print(cat.name)</span><br><span class="line">cat.sayHi()</span><br><span class="line">print(dir(cat)) <span class="comment"># 获取实例的属性名，以列表形式返回</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'name'</span>, <span class="string">'sayHi'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hasattr(cat, <span class="string">'name'</span>): <span class="comment"># 检查实例是否有这个属性</span></span><br><span class="line">    setattr(cat, <span class="string">'name'</span>, <span class="string">'tiger'</span>) <span class="comment"># same as: a.name = 'tiger'</span></span><br><span class="line">print(getattr(cat, <span class="string">'name'</span>)) <span class="comment"># same as: print(a.name)</span></span><br><span class="line">getattr(cat, <span class="string">'sayHi'</span>)() <span class="comment"># same as: cat.sayHi()</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-insepect模块自省"><a href="#1-5-2-insepect模块自省" class="headerlink" title="1.5.2. insepect模块自省"></a>1.5.2. <code>insepect</code>模块自省</h3><p><code>is{module|class|function|method|builtin}(obj)</code>：检查对象是否为模块、类、函数、方法、内建函数或方法。</p><p><code>isroutine(obj)</code>：用于检查对象是否为函数、方法、内建函数或方法等等可调用类型。用这个方法会比多个is<em>()更方便，不过它的实现仍然是用了多个is</em>()。</p><p><code>getmembers(object[, predicate])</code>：这个方法是dir()的扩展版，它会将dir()找到的名字对应的属性一并返回，形如[(name, value), …]。另外，predicate是一个方法的引用，如果指定，则应当接受value作为参数并返回一个布尔值，如果为False，相应的属性将不会返回。使用is*作为第二个参数可以过滤出指定类型的属性。</p><p><code>getmodule(object)</code>：返回object的定义所在的模块对象。</p><p><code>get{file|sourcefile}(object)</code>：获取object的定义所在的模块的文件名|源代码文件名（如果没有则返回None）。用于内建的对象（内建模块、类、函数、方法）上时会抛出TypeError异常。</p><p><code>get{source|sourcelines}(object)</code>：获取object的定义的源代码，以字符串|字符串列表返回。代码无法访问时会抛出IOError异常。只能用于module/class/function/method/code/frame/traceack对象。</p><p><code>getargspec(func)</code>：仅用于方法，获取方法声明的参数，返回元组，分别是(普通参数名的列表, <em>参数名, *</em>参数名, 默认值元组)。如果没有值，将是空列表和3个None。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。</p><p><code>getargvalues(frame)</code>：仅用于栈帧，获取栈帧中保存的该次函数调用的参数值，返回元组，分别是(普通参数名的列表, <em>参数名, *</em>参数名, 帧的locals())。如果是2.6以上版本，将返回一个命名元组(Named Tuple)，即除了索引外还可以使用属性名访问元组中的元素。</p><p><code>getcallargs(func[, *args][, **kwds])</code>：返回使用args和kwds调用该方法时各参数对应的值的字典。这个方法仅在2.7版本中才有。</p><p><code>getmro(cls)</code>：返回一个类型元组，查找类属性时按照这个元组中的顺序。如果是新式类，与cls.<code>__mro__</code>结果一样。但旧式类没有<code>__mro__</code>这个属性，直接使用这个属性会报异常，所以这个方法还是有它的价值的。</p><p><code>currentframe()</code>：返回当前的栈帧对象。</p><h2 id="1-6-Python中的重载"><a href="#1-6-Python中的重载" class="headerlink" title="1.6. Python中的重载"></a>1.6. Python中的重载</h2><p>引自知乎:<a href="http://www.zhihu.com/question/20053359" target="_blank" rel="noopener">http://www.zhihu.com/question/20053359</a></p><p>函数重载的目的：解决<strong>可变参数类型</strong>、<strong>可变参数个数</strong>两大问题。</p><p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p><p>函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p><p>函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p><h2 id="1-7-新式类和旧式类"><a href="#1-7-新式类和旧式类" class="headerlink" title="1.7. 新式类和旧式类"></a>1.7. <a href="#1.7">新式类和旧式类</a></h2><p><a href="[stackoverflow](http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python)">stackoverflow</a></p><p><strong>在Python 2.1中，旧式类是用户可用的唯一风格。</strong></p><p>（旧式）类的概念与类型的概念无关：如果<code>x</code>是旧式类的实例，则<code>x.__class__</code> 指定类的类<code>x</code>，但<code>type(x)</code>始终是<code>&lt;type   &#39;instance&#39;&gt;</code>。</p><p>这反映了这样一个事实，即所有旧式实例独立于其类，都使用一个称为实例的内置类型实现。</p><p><strong>Python 2.2中引入了新式类，以统一类和类型的概念</strong>。新式类只是用户定义的类型，不多也不少。</p><p>如果x是新样式类的实例，那么<code>type(x)</code>通常是相同的<code>x.__class__</code>（尽管不能保证 - 允许新样式类实例覆盖返回的值<code>x.__class__</code>）。</p><p><strong>引入新式类的主要动机是提供具有完整元模型的统一对象模型</strong>。</p><p>它还具有许多直接的好处，例如能够对大多数内置类型进行子类化，或引入“描述符”，从而启用计算属性。</p><p><strong>出于兼容性原因，默认情况下类仍为旧式</strong>。</p><p>通过将另一个新样式类（即类型）指定为父类来创建新样式类，或者如果不需要其他父类，则创建“顶级类型”对象。</p><p>除了返回的类型之外，新样式类的行为在许多重要细节中与旧样式类的行为不同。</p><p>其中一些更改是新对象模型的基础，就像调用特殊方法的方式一样。其他是针对兼容性问题之前无法实现的“修复”，例如在多重继承的情况下的方法解析顺序。</p><p><strong>Python 3只有新式的类</strong>。</p><p>无论你是否是子类<code>object</code>，类都是Python 3中的新风格。这篇文章很好的介绍了新式类的特性: <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html" target="_blank" rel="noopener">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></p><blockquote><p>一个旧式类的深度优先的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'C'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.foo1()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C</span><br></pre></td></tr></table></figure><p><strong>按照经典类的查找顺序从左到右深度优先的规则，在访问d.foo1()的时候,D这个类是没有的..那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过。但在新式类种，按照广度优先的原则，访问d.foo1()时，D没有，继续找B，发现B里面也没有foo1()，再找C， C中有foo1()，直接就调用该方法，输入结果就是C</strong>。</p><h2 id="1-8-鸭子模型"><a href="#1-8-鸭子模型" class="headerlink" title="1.8. 鸭子模型"></a>1.8. 鸭子模型</h2><p><code>Python</code>崇尚鸭子类型，即‘如果看起来像、叫声像而且走起路来像鸭子，那么它就是<strong>鸭子</strong></p><p><code>python</code>程序员通常根据这种行为来编写程序。例如，如果想编写现有对象的自定义版本，可以继承该对象。</p><p>也可以创建一个外观和行为像，但与它无任何关系的全新对象，后者通常用于保存程序组件的松耦合度。</p><h2 id="1-9-Python中的作用域"><a href="#1-9-Python中的作用域" class="headerlink" title="1.9. Python中的作用域"></a>1.9. Python中的作用域</h2><p>Python中，程序的变量并不是哪个位置都可以访问的，访问权限决定于这个变量是在哪里赋值的。变量的作用域决定了在哪一部分程序可以访问哪个特定的变量名称。Python的作用域一共有4种，分别是：</p><ul><li>L（Local） 局部作用域</li><li>E（Enclosing）闭包函数外的函数中</li><li>G（Global）全局作用域</li><li>B（Bulit-in）内置作用域（内置函数所在模块的范围）</li></ul><p><strong>Python执行时查找作用域的顺序是L-E-G-B</strong>，即：先在局部找，局部找不到去局部外的局部(闭包)，然后是全局再到内建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g_count = <span class="number">0</span> <span class="comment"># 全局作用域</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    o_count = <span class="number">1</span> <span class="comment"># 闭包函数外的函数中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        i_count = <span class="number">2</span> <span class="comment"># 局部作用域</span></span><br></pre></td></tr></table></figure><h2 id="1-10-GIL线程全局锁"><a href="#1-10-GIL线程全局锁" class="headerlink" title="1.10. GIL线程全局锁"></a>1.10. GIL线程全局锁</h2><p>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.<strong>对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</strong></p><p>见<a href="http://www.oschina.net/translate/pythons-hardest-problem" target="_blank" rel="noopener">Python 最难的问题</a></p><p>解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).</p><h2 id="1-11-Python里的拷贝"><a href="#1-11-Python里的拷贝" class="headerlink" title="1.11. Python里的拷贝"></a>1.11. Python里的拷贝</h2><h2 id="1-12-Python垃圾回收机制"><a href="#1-12-Python垃圾回收机制" class="headerlink" title="1.12. Python垃圾回收机制"></a>1.12. Python垃圾回收机制</h2><p><code>Python GC</code>主要使用引用计数（<code>reference counting</code>）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（<code>mark and sweep</code>）解决容器对象可能产生的循环引用问题，通过“分代回收”（<code>generation collection</code>）以空间换时间的方法提高垃圾回收效率。</p><h3 id="1-12-1-引用计数"><a href="#1-12-1-引用计数" class="headerlink" title="1.12.1. 引用计数"></a>1.12.1. 引用计数</h3><p><code>PyObject</code>是每个对象必有的内容，其中<code>ob_refcnt</code>就是做为引用计数。当一个对象有新的引用时，它的<code>ob_refcnt</code>就会增加，当引用它的对象被删除，它的<code>ob_refcnt</code>就会减少.引用计数为0时，该对象生命就结束了。</p><p>优点:</p><ol><li>简单</li><li>实时性</li></ol><p>缺点:</p><ol><li>维护引用计数消耗资源</li><li>循环引用</li></ol><h3 id="1-12-2-标记-清除机制"><a href="#1-12-2-标记-清除机制" class="headerlink" title="1.12.2. 标记-清除机制"></a>1.12.2. 标记-清除机制</h3><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p><h3 id="1-12-3-分代技术"><a href="#1-12-3-分代技术" class="headerlink" title="1.12.3. 分代技术"></a>1.12.3. 分代技术</h3><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p><p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p><p>举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p><h2 id="1-13-Python2-x与Python3-x区别"><a href="#1-13-Python2-x与Python3-x区别" class="headerlink" title="1.13. Python2.x与Python3.x区别"></a>1.13. Python2.x与Python3.x区别</h2><p><a href="https://github.com/lajos182/python-essay/blob/master/images/Python2.x%E4%B8%8EPython3.x%E7%9A%84%E5%8C%BA%E5%88%AB.pdf" target="_blank" rel="noopener">Python2.x与Python3.x区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-1-Python简介&quot;&gt;&lt;a href=&quot;#1-1-Python简介&quot; class=&quot;headerlink&quot; title=&quot;1.1. Python简介&quot;&gt;&lt;/a&gt;1.1. Python简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python是一种&lt;strong&gt;解释型&lt;/strong&gt;(不需要编译)、&lt;strong&gt;面向对象&lt;/strong&gt;、&lt;strong&gt;动态数据类型&lt;/strong&gt;的交互式语言，Python是由由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Python的优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;易于学习&lt;/strong&gt;：Python有相对较少的关键字，结构简单，有明确定义的语法，学习起来相对简单。 &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python" scheme="https://lajos182.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
